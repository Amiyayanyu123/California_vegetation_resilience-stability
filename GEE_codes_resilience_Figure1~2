var roi = ee.FeatureCollection("projects/ee-urbanstudyinequality-1/assets/California");
////////////////////////////////////////////


var stratdate = "1988-01-01"
var enddate = "2016-12-31"

var NDVI_EVI_1 = ee.ImageCollection("projects/sat-io/open-datasets/VODCA/K-BAND").filterDate(stratdate,enddate)

var EVI = NDVI_EVI_1.select("b1")
//////////////////////////////////////
  var rename_new = function(imagecol,odd,newname){
    
    var rn = function(image){
      return image.select(odd).rename(newname)
    }
    
    return imagecol.map(rn)
  }

/////////////////////deseason
//monthly median datasets
var startyear = 1988; 
var endyear = 2016; 

var startmonth = 1;
var endmonth= 12;

var startdate = ee.Date.fromYMD(startyear, startmonth, 1);
var enddate = ee.Date.fromYMD(endyear+1 , endmonth, 1);
var years = ee.List.sequence(startyear, endyear);
var months = ee.List.sequence(startmonth,endmonth);
//
  var EVI_MODIS = ee.ImageCollection.fromImages(
    years.map(function (y) {
      return months.map(function(m) {
        // var n=m+1;
        //print(m)
        var w = EVI.filter(ee.Filter.calendarRange(y, y, 'year'))
        .filter(ee.Filter.calendarRange(m, m, 'month'))
        .median()
        
        var w = w             
        return w.set('year', y)
        .set('month', m)
        .set('system:time_start', ee.Date.fromYMD(y, m, 1).millis());
      });
    }).flatten()
  );

var EVI_Zscores = EVI_MODIS.map(function(image) {
  var m = image.get("month")
  
  var img_mean = EVI_MODIS.filter(ee.Filter.eq('month', m)).mean()
  var img_std = EVI_MODIS.filter(ee.Filter.eq('month', m)).reduce(ee.Reducer.stdDev());
  
  var img_A = image.subtract(img_mean).rename("VOD_Z")
  
  return img_A.copyProperties(image,['system:time_start','year','month'])
})
//
var chart =
    ui.Chart.image
        .series({
          imageCollection: EVI_Zscores,
          region: roi,
          reducer: ee.Reducer.mean(),
          scale: 25000,
          xProperty: 'system:time_start'
        })
        .setSeriesNames(["VOD_Z"])
        .setOptions({
          title: 'VOD_Ku',
          hAxis: {title: 'Date', titleTextStyle: {italic: false, bold: true}},
          vAxis: {
            title: ' ',
            titleTextStyle: {italic: false, bold: true}
          },
          lineWidth: 5,
          colors: ['e37d05'],
          curveType: 'function'
        });
print(chart)
//
var createTimeBand = function(image) {
  // Scale milliseconds by a large constant to avoid very small slopes
  // in the linear regression output.
  return image.addBands(image.metadata('system:time_start').divide(1000 * 60 * 60 * 24 * 365));
};

var slope_GIMM_KNDVI_trend = EVI_Zscores.map(createTimeBand).select(['system:time_start', 'VOD_Z'])
  .reduce(ee.Reducer.linearFit()).select("scale").rename("slope_VODK_trend").clip(roi)

var pslope_GIMM_KNDVI_trend = EVI_Zscores.map(createTimeBand).select(['system:time_start', 'VOD_Z'])
  .reduce(ee.Reducer.pearsonsCorrelation()).select("p-value").rename("pslope_VODK_trend").clip(roi)

var all_slope_GIMM = slope_GIMM_KNDVI_trend.addBands(pslope_GIMM_KNDVI_trend)

Export.image.toDrive({
 image:all_slope_GIMM,
  description: 'all_slope_VODK',
  folder: 'all_slope_VODK', 
  scale: 25000,
  maxPixels: 1e13})  
//1
var slope_GIMM_KNDVI_trend = EVI_Zscores.map(createTimeBand).select(['system:time_start', 'VOD_Z']).filterDate("1980-01-01","2000-12-31")
  .reduce(ee.Reducer.linearFit()).select("scale").rename("slope_VODK_trend").clip(roi)

var pslope_GIMM_KNDVI_trend = EVI_Zscores.map(createTimeBand).select(['system:time_start', 'VOD_Z']).filterDate("1980-01-01","2000-12-31")
  .reduce(ee.Reducer.pearsonsCorrelation()).select("p-value").rename("pslope_VODK_trend").clip(roi)

var all_slope_GIMM = slope_GIMM_KNDVI_trend.addBands(pslope_GIMM_KNDVI_trend)

Export.image.toDrive({
 image:all_slope_GIMM,
  description: 'all_slope_VODK_1988_2000',
  folder: 'all_slope_VODK_1988_2000', 
  scale: 25000,
  maxPixels: 1e13})  
//2
var slope_GIMM_KNDVI_trend = EVI_Zscores.map(createTimeBand).select(['system:time_start', 'VOD_Z']).filterDate("2001-01-01","2020-12-31")
  .reduce(ee.Reducer.linearFit()).select("scale").rename("slope_VODK_trend").clip(roi)

var pslope_GIMM_KNDVI_trend = EVI_Zscores.map(createTimeBand).select(['system:time_start', 'VOD_Z']).filterDate("2001-01-01","2020-12-31")
  .reduce(ee.Reducer.pearsonsCorrelation()).select("p-value").rename("pslope_VODK_trend").clip(roi)

var all_slope_GIMM = slope_GIMM_KNDVI_trend.addBands(pslope_GIMM_KNDVI_trend)

Export.image.toDrive({
 image:all_slope_GIMM,
  description: 'all_slope_VODK_2001_2016',
  folder: 'all_slope_VODK_2001_2016', 
  scale: 25000,
  maxPixels: 1e13})  









//////////////////////////////////detrend
var add_Bands = function(image) {
  return image.addBands(ee.Image(1).rename("constant")).addBands(image.metadata('system:time_start')
                                                                 .divide(1000 * 60 * 60 * 24 * 365).rename("t")).copyProperties(image,['system:time_start','year','month'])
}

var detrend = function(imgecol,aimband) {
  var independents = ee.List(['constant', 't']);
  
  // Name of the dependent variable.
  var dependent = ee.String(aimband);
  
  // Compute a linear trend.  This will have two bands: 'residuals' and 
  // a 2x1 band called coefficients (columns are for dependent variables).
  var trend = imgecol.select(independents.add(dependent))
  .reduce(ee.Reducer.linearRegression(independents.length(), 1));
  // Map.addLayer(trend, {}, 'trend array image');
  
  // Flatten the coefficients into a 2-band image
  var coefficients = trend.select('coefficients')
  .arrayProject([0])
  .arrayFlatten([independents]);
  // Compute a de-trended series.
  var detrended = imgecol.map(function(image) {
    return image.select(dependent).subtract(
      image.select(independents).multiply(coefficients).reduce('sum'))
    .rename(dependent)
    .copyProperties(image,['system:time_start','system:time_end'])
  });
  
  return detrended
}

var EVI_dese_detr = detrend(EVI_Zscores.map(add_Bands),"VOD_Z")
print(EVI_dese_detr)
///////////////////////////////////////////////////////////////////
var get_lamda = function(ic){
  
  var ic = ee.ImageCollection(ic)
  var  l = ic.toList(ic.size())
  
  var dt = l.slice(0,l.size().subtract(1))   
  var dtp1 = l.slice(1,l.size()) 
  
  var create_collection = function(i) {
    var x0 = ee.Image(dt.get(i)).rename('xt').set('system:index', ee.Number(i).format('%s'))
    var x1 = ee.Image(dtp1.get(i)).rename('xtp1').set('system:index', ee.Number(i).format('%s'))
    var dx = ee.Image(x1.subtract(x0)).rename('dx').set('system:index', ee.Number(i).format('%s'))
    var constant = ee.Image(1).rename('constant').set('system:index', ee.Number(i).format('%s'))
    return constant.addBands(x0).addBands(x1).addBands(dx)
  }  
  
  var  seq = ee.List.sequence(0, dt.size().subtract(1)) 
  var  data = ee.ImageCollection.fromImages(seq.map(create_collection)) 
  
  var fit = data.select(['constant', 'xt', 'dx']).reduce(ee.Reducer.linearRegression({numX:2, numY:1}))
  var slope_kappa = fit.select(['coefficients']).arrayProject([0]).arrayFlatten([['constant', 'trend']]).select('trend')
  
  var fit = data.select(['constant', 'xt', 'xtp1']).reduce(ee.Reducer.linearRegression({numX:2, numY:1}))
  var slope_xt = fit.select(['coefficients']).arrayProject([0]).arrayFlatten([['constant', 'trend']]).select('trend')
  
  var kappa_fix = slope_kappa.add(1)
  var lambda_kappa = kappa_fix.log().rename('lambda_kappa')
  var lambda_xt = slope_xt.log().rename('lambda_xt')
  
  function create_resid_kappa(image){
    var resid = image.select('dx').subtract(image.select('xt').multiply(slope_kappa)).rename('resid')
    return resid }
  
  var resid_kappa = data.map(create_resid_kappa)
  var sigma_kappa = resid_kappa.reduce(ee.Reducer.stdDev())
  
  function create_resid_xt(image){
    var resid = image.select('xtp1').subtract(image.select('xt').multiply(slope_xt)).rename('resid')
    return resid}
  var resid_xt = data.map(create_resid_xt)
  var sigma_xt = resid_xt.reduce(ee.Reducer.stdDev())
  
  return lambda_xt.addBands(sigma_xt).addBands(slope_xt)
}
//
 function get_lt_lambda(ic){
    
    var result = get_lamda(ic)
    var  sigma_xt = result.select("resid_stdDev")
    var  lambda_xt = result.select("lambda_xt")
    var  lt_var = ic.reduce(ee.Reducer.variance(), 4)
    var  ex = ee.Image(1).subtract(sigma_xt.pow(2).divide(lt_var)) 
    var lambda_variance = ex.log().multiply(0.5)
    return lambda_variance
  }
//////////////////////////////////////////////////////////////////////

//for the time-series AR1
var years = ee.List.sequence(1990,2014)
var windowSize = 2;
var time_lam = function reduceFits(t){
  var date = ee.Date.fromYMD(t,1,1);
  
  var data = EVI_dese_detr.filterDate(date.advance(-windowSize,'year'),date.advance(windowSize+1,'year'))
  
  var lambda_time = get_lamda(data).select("trend").rename("AR1")
  
  return lambda_time.set('system:time_start',date.millis())
  .set("year", t)
}

var band = [
  "AR_1990",
  "AR_1991", "AR_1992", "AR_1993", "AR_1994", "AR_1995", "AR_1996", "AR_1997",
  "AR_1998", "AR_1999", "AR_2000", "AR_2001", "AR_2002", "AR_2003", "AR_2004",
  "AR_2005", "AR_2006", "AR_2007", "AR_2008", "AR_2009", "AR_2010", "AR_2011",
  "AR_2012", "AR_2013", "AR_2014"
];
var lam_KNDVI_TS = ee.ImageCollection(years.map(time_lam))

var AR1_KNDVI = lam_KNDVI_TS.toBands().rename(band).clip(roi);
//the relation with the VOD-K yearly
// the vegetation greening trend
var stratdate = "1988-01-01"
var enddate = "2016-12-31"

var VOD = ee.ImageCollection("projects/sat-io/open-datasets/VODCA/K-BAND").filterDate(stratdate,enddate)

var VOD = NDVI_EVI_1.select("b1")
//
var start_year = 1990;   
var end_year = 2014;   
var yearList = ee.List.sequence(start_year, end_year);  
var yearImgList = yearList.map(function(year) {  
  var date = ee.Date.fromYMD(year, 1, 1) 
  var mean = VOD.filterDate(date.advance(-windowSize,'year'),date.advance(windowSize+1,'year'))
  .median().rename("VODK")
  
  return mean.set("year", year) 
            .set('system:time_start', ee.Date.fromYMD(year, 1, 1).millis())
});  
var vod_yearly = ee.ImageCollection.fromImages(yearImgList)
//////////////////////////////////////////////////
var corr = function(joined_collection,band1,band2){
  var coll=ee.ImageCollection(joined_collection);
  var corr_img=coll.select([band1, band2])
  .reduce(ee.Reducer.pearsonsCorrelation());
  var te=corr_img.select("correlation");
  var test=te;
  return test;};

var corp=function(joined_collection,band1,band2){
  var coll=ee.ImageCollection(joined_collection);
  var corr_img=coll.select([band1, band2])
  .reduce(ee.Reducer.pearsonsCorrelation());
  var te=corr_img.select('p-value');
  var test=te;
  return test;};
  
/////  
var filtereq = ee.Filter.equals({
  leftField: 'year',
  rightField: 'year',
});
var join = ee.Join.saveFirst({
    matchKey: 'match',
});
var ALL = ee.ImageCollection(join.apply(vod_yearly,lam_KNDVI_TS,filtereq))
  .map(function(image) {
    return image.addBands(image.get('match'));
  });

var corr_1 = corr(ALL,"AR1","VODK").rename("AR1_VODK")
var corp_1 = corp(ALL,"AR1","VODK").rename("P_AR1_VODK")

var all_VODK_greening_AR1 = corr_1.addBands(corp_1).clip(roi)

Export.image.toDrive({
 image:all_VODK_greening_AR1,
  description: 'all_VODK_greening_AR1',
  folder: 'all_VODK_greening_AR1', 
  scale: 25000,
  maxPixels: 1e13})


Export.image.toAsset({
  image: AR1_KNDVI,
  description: "AR1_VOD_1987_2017",
  assetId: 'AR1_VOD_1987_2017',  // <> modify these
  scale: 25000,
  maxPixels: 1e13
});
//
var createYear = function(image) {
  // Scale milliseconds by a large constant.
  return image.addBands(image.metadata('year')).copyProperties(image,["system:time_start","year"]);
};

var kenslope = lam_KNDVI_TS.map(createYear).select(["year","AR1"]).reduce(ee.Reducer.linearFit()).select("scale")
.clip(roi)

Export.image.toDrive({
 image:kenslope,
  description: 'linearFit_AR1_VODK_1987_2017_detrend_mean',
  folder: 'linearFit_AR1_VODK_1987_2017_detrend_mean', 
  scale: 25000,
  maxPixels: 1e13})
//
var kenslope = lam_KNDVI_TS.map(createYear).filterDate("1990-01-01","2000-12-31")
.select(["year","AR1"]).reduce(ee.Reducer.linearFit()).select("scale")
.clip(roi)

Export.image.toDrive({
 image:kenslope,
  description: 'linearFit_AR1_VODK_detrend_mean_1990_2000',
  folder: 'linearFit_AR1_VODK_detrend_mean_1990_2000', 
  scale: 25000,
  maxPixels: 1e13})
//
var kenslope = lam_KNDVI_TS.map(createYear).filterDate("2001-01-01","2014-12-31")
.select(["year","AR1"]).reduce(ee.Reducer.linearFit()).select("scale")
.clip(roi)

Export.image.toDrive({
 image:kenslope,
  description: 'linearFit_AR1_VODK_detrend_mean_2000_2014',
  folder: 'linearFit_AR1_VODK_detrend_mean_2000_2014', 
  scale: 25000,
  maxPixels: 1e13})
  
var long_term_AR1_VODK =  get_lamda(EVI_dese_detr).select("trend").rename("AR1").clip(roi)
  
Export.image.toDrive({
 image:long_term_AR1_VODK,
  description: 'long_term_AR1_VODK',
  folder: 'long_term_AR1_VODK', 
  scale: 25000,
  maxPixels: 1e13})  
//
var long_term_AR1_VODK =  get_lamda(EVI_dese_detr.filterDate("1988-01-01","2000-12-31")).select("trend").rename("AR1_Before2000").clip(roi)
Export.image.toDrive({
 image:long_term_AR1_VODK,
  description: 'long_term_AR1_VODK_Before2000',
  folder: 'long_term_AR1_VODK_Before2000', 
  scale: 25000,
  maxPixels: 1e13})
  
var long_term_AR1_VODK =  get_lamda(EVI_dese_detr.filterDate("2001-01-01","2016-12-31")).select("trend").rename("AR1_After2000").clip(roi)
Export.image.toDrive({
 image:long_term_AR1_VODK,
  description: 'long_term_AR1_VODK_Before2000',
  folder: 'long_term_AR1_VODK_Before2000', 
  scale: 25000,
  maxPixels: 1e13})
  
///////////////////////
//
//for the time-series STD
var years = ee.List.sequence(1990,2014)
var windowSize = 2;
var time_lam_STD = function reduceFits(t){
  var date = ee.Date.fromYMD(t,1,1);
  
  var data = EVI_dese_detr.filterDate(date.advance(-windowSize,'year'),date.advance(windowSize+1,'year'))
  
  var lambda_time = data.reduce(ee.Reducer.variance()).rename("Var")
  
  return lambda_time.set('system:time_start',date.millis())
  .set("year", t)
}

var band = [
  "Var_1990",
  "Var_1991", "Var_1992", "Var_1993", "Var_1994", "Var_1995", "Var_1996", "Var_1997",
  "Var_1998", "Var_1999", "Var_2000", "Var_2001", "Var_2002", "Var_2003", "Var_2004",
  "Var_2005", "Var_2006", "Var_2007", "Var_2008", "Var_2009", "Var_2010", "Var_2011",
  "Var_2012", "Var_2013", "Var_2014"
];
var lam_KNDVI_TS = ee.ImageCollection(years.map(time_lam_STD))

var STD_KNDVI = lam_KNDVI_TS.toBands().rename(band).clip(roi);

Export.image.toAsset({
  image: STD_KNDVI,
  description: "Var_VOD_1990_2014",
  assetId: 'Var_VOD_1990_2014',  // <> modify these
  scale: 25000,
  maxPixels: 1e13
});
//
 

//  
var createYear = function(image) {
  // Scale milliseconds by a large constant.
  return image.addBands(image.metadata('year')).copyProperties(image,["system:time_start","year"]);
};

var kenslope = lam_KNDVI_TS.map(createYear).select(["year","Var"]).reduce(ee.Reducer.kendallsCorrelation(2),4)
.clip(roi)

Export.image.toDrive({
 image:kenslope,
  description: 'kenslope_Var_VODK_1990_2014_detrend_mean',
  folder: 'kenslope_Var_VODK_1990_2014_detrend_mean', 
  scale: 25000,
  maxPixels: 1e13})
  
//
var kenslope = lam_KNDVI_TS.map(createYear).filterDate("1990-01-01","2000-12-31")
.select(["year","Var"]).reduce(ee.Reducer.kendallsCorrelation(2),4)
.clip(roi)

Export.image.toDrive({
 image:kenslope,
  description: 'kenslope_Var_VODK_detrend_mean_1990_2000',
  folder: 'kenslope_Var_VODK_detrend_mean_1990_2000', 
  scale: 25000,
  maxPixels: 1e13})
//
var kenslope = lam_KNDVI_TS.map(createYear).filterDate("2001-01-01","2014-12-31")
.select(["year","Var"]).reduce(ee.Reducer.kendallsCorrelation(2),4)
.clip(roi)

Export.image.toDrive({
 image:kenslope,
  description: 'kenslope_Var_VODK_detrend_mean_2000_2014',
  folder: 'kenslope_Var_VODK_detrend_mean_2000_2014', 
  scale: 25000,
  maxPixels: 1e13})
  
var long_term_Var_VODK =  EVI_dese_detr.reduce(ee.Reducer.variance()).rename("Var").clip(roi)
  
Export.image.toDrive({
 image:long_term_Var_VODK,
  description: 'long_term_Var_VODK',
  folder: 'long_term_Var_VODK', 
  scale: 25000,
  maxPixels: 1e13})    
  
//linearfit
var createYear = function(image) {
  // Scale milliseconds by a large constant.
  return image.addBands(image.metadata('year')).copyProperties(image,["system:time_start","year"]);
};

var kenslope = lam_KNDVI_TS.map(createYear).select(["year","Var"]).reduce(ee.Reducer.linearFit()).select("scale")
.clip(roi)

Export.image.toDrive({
 image:kenslope,
  description: 'linearFit_Var_VODK_1987_2017_detrend_mean',
  scale: 25000,
  maxPixels: 1e13})
//
var kenslope = lam_KNDVI_TS.map(createYear).filterDate("1990-01-01","2000-12-31")
.select(["year","Var"]).reduce(ee.Reducer.linearFit()).select("scale")
.clip(roi)

Export.image.toDrive({
 image:kenslope,
  description: 'linearFit_Var_VODK_detrend_mean_1990_2000',
  scale: 25000,
  maxPixels: 1e13})
//
var kenslope = lam_KNDVI_TS.map(createYear).filterDate("2001-01-01","2014-12-31")
.select(["year","Var"]).reduce(ee.Reducer.linearFit()).select("scale")
.clip(roi)

Export.image.toDrive({
 image:kenslope,
  description: 'linearFit_Var_VODK_detrend_mean_2000_2014',
  scale: 25000,
  maxPixels: 1e13})  
  
//////////////////////////////////////////////////lambda_var
var years = ee.List.sequence(1990,2014)
var windowSize = 2;
var time_lam = function reduceFits(t){
  var date = ee.Date.fromYMD(t,1,1);
  
  var data = EVI_dese_detr.filterDate(date.advance(-windowSize,'year'),date.advance(windowSize+1,'year'))
  
  var lambda_time = get_lt_lambda(data).rename("lambda_var")
  
  return lambda_time.set('system:time_start',date.millis())
  .set("year", t)
}

var band = [
  "AR_1990",
  "AR_1991", "AR_1992", "AR_1993", "AR_1994", "AR_1995", "AR_1996", "AR_1997",
  "AR_1998", "AR_1999", "AR_2000", "AR_2001", "AR_2002", "AR_2003", "AR_2004",
  "AR_2005", "AR_2006", "AR_2007", "AR_2008", "AR_2009", "AR_2010", "AR_2011",
  "AR_2012", "AR_2013", "AR_2014"
];
var lam_KNDVI_TS = ee.ImageCollection(years.map(time_lam))

var AR1_KNDVI = lam_KNDVI_TS.toBands().rename(band).clip(roi);

Export.image.toAsset({
  image: AR1_KNDVI,
  description: "lambda_var_VOD_1987_2017_detrend_mean",
  assetId: 'lambda_var_VOD_1987_2017_detrend_mean',  // <> modify these
  scale: 25000,
  maxPixels: 1e13
});

var createYear = function(image) {
  // Scale milliseconds by a large constant.
  return image.addBands(image.metadata('year')).copyProperties(image,["system:time_start","year"]);
};

var kenslope = lam_KNDVI_TS.map(createYear).select(["year","lambda_var"]).reduce(ee.Reducer.kendallsCorrelation(2),4)
.clip(roi)
Export.image.toDrive({
 image:kenslope,
  description: 'kenslope_lambda_var_VOD_1987_2017_detrend_mean',
  folder: 'kenslope_lambda_var_VOD_1987_2017_detrend_mean', 
  scale: 25000,
  maxPixels: 1e13})







